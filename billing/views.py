from django.shortcuts import render, redirect
from django.apps import apps
from django.http import JsonResponse
import json
from datetime import datetime
import sqlite3
import pandas as pd
from django.contrib import messages
from django.conf import settings
from .models import BillLine
from django.db import connection

# H√†m chuy·ªÉn ƒë·ªïi datetime th√†nh chu·ªói
class DateTimeEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, datetime):
            return obj.strftime('%Y-%m-%d %H:%M:%S')  # Chuy·ªÉn datetime th√†nh chu·ªói
        return super().default(obj)

def json_view(request):
    all_data = {}

    # L·∫∑p qua t·∫•t c·∫£ c√°c model trong app 'billing'
    for model in apps.get_app_config('billing').get_models():
        model_name = model.__name__
        all_data[model_name] = list(model.objects.values())

    # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu sang JSON v·ªõi DateTimeEncoder
    json_data = json.dumps(all_data, cls=DateTimeEncoder)

    return render(request, 'billing/template.html', {'data': json_data})

def upload_csv(request):
    if request.method == "POST":
        csv_file = request.FILES.get('csv_file')
        if not csv_file:
            messages.error(request, "‚ùå Vui l√≤ng ch·ªçn m·ªôt t·ªáp CSV!")
            return redirect('upload_csv')

        if not csv_file.name.endswith('.csv'):
            messages.error(request, "‚ùå File ph·∫£i l√† ƒë·ªãnh d·∫°ng CSV!")
            return redirect('upload_csv')
        try:
            print("Decode CSV file and load into pandas DataFrame")
            df = pd.read_csv(csv_file)

            # Connect to the SQLite database
            db_path = settings.DATABASES['default']['NAME']  # Django SQLite DB path
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()

            segments = df[['M√£ PKKH', 'M√¥ t·∫£ Ph√¢n Kh√∫c Kh√°ch h√†ng']].drop_duplicates()
            for _, row in segments.iterrows():
                cursor.execute("""
                    INSERT OR IGNORE INTO billing_segment (segment_code, segment_info)
                    VALUES (?, ?)
                """, (row['M√£ PKKH'], row['M√¥ t·∫£ Ph√¢n Kh√∫c Kh√°ch h√†ng']))

            customers = df[['M√£ kh√°ch h√†ng', 'T√™n kh√°ch h√†ng', 'M√£ PKKH']].drop_duplicates()
            for _, row in customers.iterrows():
                cursor.execute("""
                    INSERT OR IGNORE INTO billing_customer (customer_code, customer_name, segment_id)
                    VALUES (?, ?, ?)
                """, (row['M√£ kh√°ch h√†ng'], row['T√™n kh√°ch h√†ng'], row['M√£ PKKH']))

            categories = df[['M√£ nh√≥m h√†ng', 'T√™n nh√≥m h√†ng']].drop_duplicates()
            for _, row in categories.iterrows():
                cursor.execute("""
                    INSERT OR IGNORE INTO billing_category (category_code, category_name)
                    VALUES (?, ?)
                """, (row['M√£ nh√≥m h√†ng'], row['T√™n nh√≥m h√†ng']))

            products = df[['M√£ m·∫∑t h√†ng', 'T√™n m·∫∑t h√†ng', 'M√£ nh√≥m h√†ng', 'ƒê∆°n gi√°']].drop_duplicates()
            for _, row in products.iterrows():
                cursor.execute("""
                    INSERT OR IGNORE INTO billing_product (product_code, product_name, category_id, price)
                    VALUES (?, ?, ?, ?)
                """, (row['M√£ m·∫∑t h√†ng'], row['T√™n m·∫∑t h√†ng'], row['M√£ nh√≥m h√†ng'], row['ƒê∆°n gi√°']))

            bills = df[['M√£ ƒë∆°n h√†ng', 'M√£ kh√°ch h√†ng', 'Th·ªùi gian t·∫°o ƒë∆°n']].drop_duplicates()
            for _, row in bills.iterrows():
                cursor.execute("""
                    INSERT OR IGNORE INTO billing_bill (bill_code, customer_id, time_created)
                    VALUES (?, ?, ?)
                """, (row['M√£ ƒë∆°n h√†ng'], row['M√£ kh√°ch h√†ng'], row['Th·ªùi gian t·∫°o ƒë∆°n']))

            for _, row in df.iterrows():
                cursor.execute("""
                    INSERT INTO billing_billline (bill_id, product_id, quantity, unit_price, total_price)
                    VALUES (?, ?, ?, ?, ?)
                """, (row['M√£ ƒë∆°n h√†ng'], row['M√£ m·∫∑t h√†ng'], row['SL'], row['ƒê∆°n gi√°'], row['Th√†nh ti·ªÅn']))
            conn.commit()
            conn.close()

            messages.success(request, "‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c nh·∫≠p th√†nh c√¥ng v√†o SQLite!")
            return redirect(request.META.get('HTTP_REFERER', 'upload_page'))
        except Exception as e:
            messages.error(request, f"‚ùå ƒê√£ x·∫£y ra l·ªói: {e}")
            return redirect('upload_csv')

    return render(request, 'billing/upload.html')

# üî• Tr·∫£ d·ªØ li·ªáu v·ªÅ cho D3.js
def visualize_data(request):
    query = """
        SELECT 
            bill.bill_code,
            customer.customer_code,
            product.product_code,
            product.product_name,
            category.category_code,
            category.category_name,
            bill.time_created,
            billline.quantity,
            billline.total_price
        FROM billing_billline AS billline
        INNER JOIN billing_bill AS bill ON billline.bill_id = bill.bill_code
        INNER JOIN billing_customer AS customer ON bill.customer_id = customer.customer_code
        INNER JOIN billing_product AS product ON billline.product_id = product.product_code
        INNER JOIN billing_category AS category ON product.category_id = category.category_code
    """

    with connection.cursor() as cursor:
        cursor.execute(query)
        result = cursor.fetchall()
    data = [
        {
            "M√£ ƒë∆°n h√†ng": item[0],
            "M√£ kh√°ch h√†ng": item[1],
            "M√£ m·∫∑t h√†ng": item[2],
            "T√™n m·∫∑t h√†ng": item[3],
            "M√£ nh√≥m h√†ng": item[4],
            "T√™n nh√≥m h√†ng": item[5],
            "Th·ªùi gian t·∫°o ƒë∆°n": item[6].strftime('%Y-%m-%d %H:%M:%S') if item[6] else "",
            "SL": item[7],
            "Th√†nh ti·ªÅn": item[8]
        }
        for item in result
    ]
    return JsonResponse(data, safe=False)

def chart_view(request):
    return render(request, 'billing/chart.html')